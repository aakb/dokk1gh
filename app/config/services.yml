# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Features,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    ApiBundle\Controller\:
        resource: '../../src/ApiBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    AppBundle\Service\AeosService:
        arguments:
            -
                client:
                    location: '%aoes_location%'
                    username: '%aoes_username%'
                    password: '%aoes_password%'
                    context:  '%aeos_context%'
                    debug:    '%kernel.debug%'
                aeos:
                    timezone: '%aeos_timezone%'
                    identifier_type: '%aeos_identifier_type%'
                    identifier_length: '%aeos_identifier_length%'
                    block_reason: '%aeos_block_reason%'

    AppBundle\Service\UserManager:
        arguments:
            - '@fos_user.util.password_updater'
            - '@fos_user.util.canonical_fields_updater'
            - '@fos_user.object_manager'
            - '%fos_user.model.user.class%'
            - '@fos_user.util.token_generator'
            - '@twig'
            - '@router'
            - '@fos_user.mailer'
            - '@mailer'
            -
                user_created:
                    sender:
                        email: '%mailer_email%'
                        name: '%mailer_name%'
                    user:
                        subject: '%user_created_user_subject%'
                        header: '%user_created_user_header%'
                        body: '%user_created_user_body%'
                        button:
                            text: '%user_created_user_button_text%'
                        footer: '%user_created_user_footer%'

    # Inject our custom config manager (overwrite the original one)
    easyadmin.config.manager:
        class: AppBundle\Configuration\EasyAdminConfigManager
        arguments:
            - '@security.authorization_checker'
            - '@security.token_storage'
            - '@easyadmin.cache.manager'
            - '@property_accessor'
            - '%easyadmin.config%'
            - '%kernel.debug%'

    # Enable serialization of objects.
    JMS\Serializer\Handler\StdClassHandler:
        tags: ['jms_serializer.subscribing_handler']

    # Don't serialize names in snake_case.
    jms_serializer.naming_strategy:
        alias: jms_serializer.identical_property_naming_strategy

    twig.stringloader:
        class: Twig_Extension_StringLoader
